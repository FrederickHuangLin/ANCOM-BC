library(tidyverse)
library(nloptr)
library(phyloseq)
library(DT)
abn.tab.gen=function(n.taxa, n.samp.grp1, n.samp.grp2, prop.diff, abn.seed, obs.seed,
struc.zero.prop, out.zero.prop, library.size){
# Total number of samples
n.samp=n.samp.grp1+n.samp.grp2
set.seed(abn.seed) # This seed is used to control whether you would like to have the same population
low.prop=0.6 # Proportion of low abundance
med.prop=0.3 # Proportion of medium abundance
hi.prop=0.1  # Proportion of high abundance
# Indices for taxa abundance
index=sample(c(1, 2, 3), n.taxa, replace = T, prob = c(low.prop, med.prop, hi.prop))
# Poisson parameters
lambda=rep(NA, n.taxa)
lambda[which(index==1)]=rgamma(length(which(index==1)), shape=50, rate=1)
lambda[which(index==2)]=rgamma(length(which(index==2)), shape=200, rate=1)
lambda[which(index==3)]=rgamma(length(which(index==3)), shape=10000, rate=1)
# Which taxa are differentially abundant
diff.ind=rep(0, n.taxa)
# Group1 is higher than group2
diff1.ind=sample(c(1:n.taxa), floor(n.taxa*prop.diff), replace=FALSE)
diff.ind[diff1.ind]=1
# Group2 is higher than group1
wt=runif(1, 0, 1)
diff2.ind=sample(diff1.ind, wt*length(diff1.ind), replace=FALSE)
diff.ind[diff2.ind]=2
# Structural zeros
diff3.ind=sample(which(diff.ind==0), struc.zero.prop*length(which(diff.ind==0)), replace = FALSE)
diff.ind[diff3.ind]=-1
# Signal size
effect.size=rep(1, n.taxa)
effect.size[diff1.ind]=runif(length(diff1.ind), 1, 10)
effect.size[diff2.ind]=runif(length(diff2.ind), 0.1, 1)
effect.size[diff3.ind]=0
names(effect.size)=paste0("taxon", seq(n.taxa))
# Abundance template
temp.grp1=round(lambda*effect.size)
temp.grp2=round(lambda)
for (i in which(effect.size!=1)) {
if(temp.grp1[i]==temp.grp2[i]) temp.grp1[i]=temp.grp1[i]+1
}
temp.dat=data.frame(temp.grp1, temp.grp2, effect.size)
rownames(temp.dat)=paste0("taxon", seq(n.taxa))
# Abundance table in the ecosystem
abn.mat=matrix(0, ncol=n.samp, nrow=n.taxa)
for(i in 1:n.taxa){
abn.mat[i, ]=c(rpois(n.samp.grp1, temp.grp1[i]), rpois(n.samp.grp2, temp.grp2[i]))
}
# Outlier zeros
out.ind=rep(0, n.taxa); out.ind[sample(seq(n.taxa), out.zero.prop*n.taxa, replace = F)]=1
names(out.ind)=paste0("taxon", seq(n.taxa))
abn.mat[which(out.ind==1), sample(seq(n.samp), out.zero.prop*n.samp, replace = F)]=0
abn.total=colSums(abn.mat)
names(abn.total)=paste0("sub", seq(n.samp))
# Number of taxa that are sampled for each subject
if(library.size=="large"){
depth=1/runif(n.samp, 5, 10)
obs.total=round(max(abn.total)*depth)
}else if(library.size=="small"){
depth=1/sample(c(runif(n.samp, 10, 50), runif(n.samp, 100, 500)), n.samp, replace = T)
obs.total=round(max(abn.total)*depth)
}
names(obs.total)=paste0("sub", seq(n.samp))
# Specimen abundance
set.seed(obs.seed)
obs.list=lapply(1:n.samp, function(i)
phyloseq:::rarefaction_subsample(x=abn.mat[, i], sample.size=obs.total[i]))
obs.mat=Reduce('cbind', obs.list)
# Prepare output data sets
abn.dat=data.frame(abn.mat, row.names = NULL)
rownames(abn.dat)=paste0("taxon", seq(n.taxa))
colnames(abn.dat)=paste0("sub", seq(n.samp))
obs.dat=data.frame(obs.mat, row.names = NULL)
rownames(obs.dat)=paste0("taxon", seq(n.taxa))
colnames(obs.dat)=paste0("sub", seq(n.samp))
grp.ind=c(rep(1, n.samp.grp1), rep(2, n.samp.grp2))
names(grp.ind)=paste0("sub", seq(n.samp))
names(diff.ind)=paste0("taxon", seq(n.taxa))
c.mult=obs.total/abn.total
names(c.mult)=paste0("sub", seq(n.samp))
test.data=list(temp.dat, abn.dat, obs.dat, effect.size, grp.ind,
diff.ind, out.ind, c.mult, abn.total, obs.total)
names(test.data)=c("template", "pop.abn", "obs.abn", "effect.size", "grp",
"diff.taxa", "outlier", "mult", "abn.total", "obs.total")
return(test.data)
}
library(tidyverse)
library(phyloseq)
library(DT)
n.taxa=500; n.samp.grp1=20; n.samp.grp2=30; prop.diff=0.25;
abn.seed = 1; obs.seed = 2; library.size="small"
test.dat=abn.tab.gen(n.taxa, n.samp.grp1, n.samp.grp2, prop.diff, abn.seed, obs.seed,
struc.zero.prop=0.2, out.zero.prop=0.05, library.size)
obs.abn=test.dat$obs.abn
source("ANCOM-BC.R")
n.samp.grp=c(20, 30)
n.grp=length(n.samp.grp)
meta.data=cbind(Sample.ID=paste0("sub", seq(sum(n.samp.grp))),
group=rep(paste0("grp", c(1:n.grp)), n.samp.grp))
feature.table=obs.abn; sample.var="Sample.ID"; group.var="group"; pre.cut=0.90; neg.lb=FALSE
pre.process=feature_table_pre_process(feature.table, meta.data, sample.var, group.var, pre.cut, neg.lb)
feature.table=pre.process$feature.table
group.name=pre.process$group.name
group.ind=pre.process$group.ind
struc.zero=pre.process$structure.zeros
grp.name=group.name; grp.ind=group.ind; adj.method="bonferroni"
tol.EM=1e-5; max.iterNum=100; alpha=0.05
# Run ANCOM-BC
start_time <- Sys.time()
out=ANCOM_BC(feature.table, grp.name, grp.ind, struc.zero, adj.method,
tol.EM, max.iterNum, alpha)
end_time <- Sys.time()
end_time - start_time
res=cbind(out$res, diff.ind=test.dat$diff.taxa[rownames(out$feature.table)])
# FDR
FDR=ifelse(sum(res$diff.abn, na.rm = T)==0, 0,
sum(ifelse(res$diff.ind==0&res$diff.abn, 1, 0), na.rm = T)/
sum(res$diff.abn, na.rm = T))
# Power
power=sum(ifelse(res$diff.ind!=0&res$diff.abn, 1, 0), na.rm = T)/
sum(res$diff.ind!=0, na.rm = T)
c(FDR, power)
res=out$res
datatable(res)
res=signif(out$res, digits = 3)
# Results
res=signif(as.matrix(out$res), digits = 3)
datatable(res)
# Results
write_csv(out$res, "demo_outcome.csv")
save(obs.abn, "demo_input.RData")
?save
write_csv(obs.abn, "demo_otu.csv")
# Synthetic metadata
meta.data=cbind(Sample.ID=paste0("sub", seq(sum(n.samp.grp))),
group=rep(paste0("grp", c(1:n.grp)), n.samp.grp))
write_csv(meta.data, "demo_meta.csv")
library(tidyverse)
library(phyloseq)
# Custom function for generating synthetic data
abn.tab.gen=function(n.taxa, n.samp.grp1, n.samp.grp2, prop.diff, abn.seed, obs.seed,
struc.zero.prop, out.zero.prop, library.size){
# Total number of samples
n.samp=n.samp.grp1+n.samp.grp2
set.seed(abn.seed) # This seed is used to control whether you would like to have the same population
low.prop=0.6 # Proportion of low abundance
med.prop=0.3 # Proportion of medium abundance
hi.prop=0.1  # Proportion of high abundance
# Indices for taxa abundance
index=sample(c(1, 2, 3), n.taxa, replace = T, prob = c(low.prop, med.prop, hi.prop))
# Poisson parameters
lambda=rep(NA, n.taxa)
lambda[which(index==1)]=rgamma(length(which(index==1)), shape=50, rate=1)
lambda[which(index==2)]=rgamma(length(which(index==2)), shape=200, rate=1)
lambda[which(index==3)]=rgamma(length(which(index==3)), shape=10000, rate=1)
# Which taxa are differentially abundant
diff.ind=rep(0, n.taxa)
# Group1 is higher than group2
diff1.ind=sample(c(1:n.taxa), floor(n.taxa*prop.diff), replace=FALSE)
diff.ind[diff1.ind]=1
# Group2 is higher than group1
wt=runif(1, 0, 1)
diff2.ind=sample(diff1.ind, wt*length(diff1.ind), replace=FALSE)
diff.ind[diff2.ind]=2
# Structural zeros
diff3.ind=sample(which(diff.ind==0), struc.zero.prop*length(which(diff.ind==0)), replace = FALSE)
diff.ind[diff3.ind]=-1
# Signal size
effect.size=rep(1, n.taxa)
effect.size[diff1.ind]=runif(length(diff1.ind), 1, 10)
effect.size[diff2.ind]=runif(length(diff2.ind), 0.1, 1)
effect.size[diff3.ind]=0
names(effect.size)=paste0("taxon", seq(n.taxa))
# Abundance template
temp.grp1=round(lambda*effect.size)
temp.grp2=round(lambda)
for (i in which(effect.size!=1)) {
if(temp.grp1[i]==temp.grp2[i]) temp.grp1[i]=temp.grp1[i]+1
}
temp.dat=data.frame(temp.grp1, temp.grp2, effect.size)
rownames(temp.dat)=paste0("taxon", seq(n.taxa))
# Abundance table in the ecosystem
abn.mat=matrix(0, ncol=n.samp, nrow=n.taxa)
for(i in 1:n.taxa){
abn.mat[i, ]=c(rpois(n.samp.grp1, temp.grp1[i]), rpois(n.samp.grp2, temp.grp2[i]))
}
# Outlier zeros
out.ind=rep(0, n.taxa); out.ind[sample(seq(n.taxa), out.zero.prop*n.taxa, replace = F)]=1
names(out.ind)=paste0("taxon", seq(n.taxa))
abn.mat[which(out.ind==1), sample(seq(n.samp), out.zero.prop*n.samp, replace = F)]=0
abn.total=colSums(abn.mat)
names(abn.total)=paste0("sub", seq(n.samp))
# Number of taxa that are sampled for each subject
if(library.size=="large"){
depth=1/runif(n.samp, 5, 10)
obs.total=round(max(abn.total)*depth)
}else if(library.size=="small"){
depth=1/sample(c(runif(n.samp, 10, 50), runif(n.samp, 100, 500)), n.samp, replace = T)
obs.total=round(max(abn.total)*depth)
}
names(obs.total)=paste0("sub", seq(n.samp))
# Specimen abundance
set.seed(obs.seed)
obs.list=lapply(1:n.samp, function(i)
phyloseq:::rarefaction_subsample(x=abn.mat[, i], sample.size=obs.total[i]))
obs.mat=Reduce('cbind', obs.list)
# Prepare output data sets
abn.dat=data.frame(abn.mat, row.names = NULL)
rownames(abn.dat)=paste0("taxon", seq(n.taxa))
colnames(abn.dat)=paste0("sub", seq(n.samp))
obs.dat=data.frame(obs.mat, row.names = NULL)
rownames(obs.dat)=paste0("taxon", seq(n.taxa))
colnames(obs.dat)=paste0("sub", seq(n.samp))
grp.ind=c(rep(1, n.samp.grp1), rep(2, n.samp.grp2))
names(grp.ind)=paste0("sub", seq(n.samp))
names(diff.ind)=paste0("taxon", seq(n.taxa))
c.mult=obs.total/abn.total
names(c.mult)=paste0("sub", seq(n.samp))
test.data=list(temp.dat, abn.dat, obs.dat, effect.size, grp.ind,
diff.ind, out.ind, c.mult, abn.total, obs.total)
names(test.data)=c("template", "pop.abn", "obs.abn", "effect.size", "grp",
"diff.taxa", "outlier", "mult", "abn.total", "obs.total")
return(test.data)
}
# Synthetic OTU table
n.taxa=500; n.samp.grp1=20; n.samp.grp2=30; prop.diff=0.25;
abn.seed = 1; obs.seed = 2; library.size="small"
test.dat=abn.tab.gen(n.taxa, n.samp.grp1, n.samp.grp2, prop.diff, abn.seed, obs.seed,
struc.zero.prop=0.2, out.zero.prop=0.05, library.size)
obs.abn=test.dat$obs.abn
write_csv(obs.abn, "demo_otu.csv")
# Synthetic metadata
meta.data=data.frame(Sample.ID=paste0("sub", seq(n.samp.grp1+n.samp.grp2)),
)
paste0("sub", seq(n.samp.grp1+n.samp.grp2))
rep(c("grp1", "grp2"), each=c(n.samp.grp1, n.samp.grp2))
rep(c("grp1", "grp2"), c(n.samp.grp1, n.samp.grp2))
# Synthetic metadata
meta.data=data.frame(Sample.ID=paste0("sub", seq(n.samp.grp1+n.samp.grp2)),
group=rep(c("grp1", "grp2"), c(n.samp.grp1, n.samp.grp2)))
View(meta.data)
write_csv(meta.data, "demo_meta.csv")
# Read in OTU table and metadata
obs.abn=read_csv("demo_otu.csv")
meta.data=read_csv("demo_meta.csv")
View(meta.data)
# Data pre-processing
feature.table=obs.abn; sample.var="Sample.ID"; group.var="group"; pre.cut=0.90; neg.lb=FALSE
pre.process=feature_table_pre_process(feature.table, meta.data, sample.var, group.var, pre.cut, neg.lb)
source("ANCOM-BC.R")
pre.process=feature_table_pre_process(feature.table, meta.data, sample.var, group.var, pre.cut, neg.lb)
feature.table=pre.process$feature.table
group.name=pre.process$group.name
group.ind=pre.process$group.ind
struc.zero=pre.process$structure.zeros
grp.name=group.name; grp.ind=group.ind; adj.method="bonferroni"
tol.EM=1e-5; max.iterNum=100; alpha=0.05
# Run ANCOM-BC
start_time <- Sys.time()
out=ANCOM_BC(feature.table, grp.name, grp.ind, struc.zero, adj.method,
tol.EM, max.iterNum, alpha)
end_time <- Sys.time()
end_time - start_time
# Results
write_csv(out$res, "demo_output.csv")
