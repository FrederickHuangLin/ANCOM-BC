summary_template =
list("Age" =
list("min" = ~ min(.data$age, na.rm = T),
"max" = ~ max(.data$age, na.rm = T),
"mean (sd)" = ~ qwraps2::mean_sd(.data$age, na_rm = T, show_n = "never")),
"BMI" =
list("min" = ~ min(.data$bmi, na.rm = T),
"max" = ~ max(.data$bmi, na.rm = T),
"mean (sd)" = ~ qwraps2::mean_sd(.data$bmi, na_rm = T, show_n = "never")),
"Gender" =
list("F" = ~ n_perc0(.data$gender=="Female"),
"M" = ~ n_perc0(.data$gender=="Male"),
"NA" = ~ n_perc0(.data$gender=="NA")),
"Breast Fed" =
list("Y" = ~ qwraps2::n_perc0(.data$breast.fed == "Yes"),
"N"  = ~ qwraps2::n_perc0(.data$breast.fed == "No (Formula-fed)"),
"NA"  = ~ qwraps2::n_perc0(.data$breast.fed == "NA"))
)
temp = summary_table(dplyr::group_by(meta_data2, country), summary_template)
temp
View(temp)
rm(list = ls())
library(tidyverse)
library(phyloseq)
library(ggpubr)
library(RColorBrewer)
library(DT)
library(pander)
panderOptions('table.caption.prefix', NULL)
panderOptions('table.continues', NULL)
panderOptions('table.emphasize.rownames', FALSE)
source("sim_data_poi_gam_two_grp.R")
source("ancom_bc_v1.0.R")
source("ancom_simple.R")
# The number of taxa, library size, and sample size
n.taxa = 1000; balanced.micro.load = FALSE; balanced.lib.size = TRUE
samp.frac = "small"; n.samp = c("20_30", "50_50")
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=seq(iterNum)
# Define the simulation parameters
simparams=expand.grid(n.taxa, n.samp, prop.diff, abn.seed,
balanced.micro.load, balanced.lib.size, samp.frac)
colnames(simparams)=c("n.taxa", "n.samp", "prop.diff", "abn.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac")
simparams=simparams%>%mutate(obs.seed=abn.seed+1)
simparams=simparams%>%separate(col = n.samp, into = c("n.samp.grp1", "n.samp.grp2"), sep = "_")
simparams=simparams%>%arrange(n.taxa, n.samp.grp1, prop.diff, abn.seed, obs.seed)
simparams.list=apply(simparams, 1, paste0, collapse="_")
simparamslabels=c("n.taxa", "n.samp.grp1", "n.samp.grp2","prop.diff", "abn.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac", "obs.seed")
## Read in original data
dat.ancom_bc=read_csv("../data/sim_poi_gam/large/fdr_power_ancom_bc_bh.csv")
dat.ancom=read_csv("../data/sim_poi_gam/large/fdr_power_ancom_large.csv")
dat.deseq2=read_csv("../data/sim_poi_gam/large/fdr_power_deseq2_large.csv")
dat.edger=read_csv("../data/sim_poi_gam/large/fdr_power_edger_large.csv")
dat.zilg=read_csv("../data/sim_poi_gam/large/fdr_power_zilg_large.csv")
dat.zig=read_csv("../data/sim_poi_gam/large/fdr_power_zig_large.csv")
dat.wilcox_un=read_csv("../data/sim_poi_gam/large/fdr_power_wilcox_un_large.csv")
dat.wilcox_tss=read_csv("../data/sim_poi_gam/large/fdr_power_wilcox_tss_large.csv")
## Reshaping data
simpattern=distinct(simparams, n.taxa, n.samp.grp1, n.samp.grp2, prop.diff)
data_summary = function(eval_data, method){
FDR=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
FDRSD=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
power=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
powerSD=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
data_sum = data.frame(FDR, FDRSD, power, powerSD, simpattern, method)
data_sum = data_sum%>%unite(n.samp.grp, n.samp.grp1, n.samp.grp2, sep = ", ")
return(data_sum)
}
eval.dat.list = list(dat.ancom_bc, dat.ancom, dat.deseq2, dat.edger,
dat.zilg, dat.zig, dat.wilcox_un, dat.wilcox_tss)
method.list = list("ANCOM-BC", "ANCOM", "DESeq2", "edgeR", "ZILG", "ZIG", "Wilcoxon", "Wilcoxon + TSS")
dat.fig.list = vector(mode = "list", length = length(eval.dat.list))
for (i in 1:length(eval.dat.list)) {
dat.fig.list[[i]] = data_summary(eval.dat.list[[i]], method.list[[i]])
}
## Merge data
dat.fig=Reduce('rbind', dat.fig.list)
dat.fig$n.samp.grp=factor(dat.fig$n.samp.grp)
levels(dat.fig$n.samp.grp)=c("n = 20/30", "n = 50/50")
dat.fig$method=factor(dat.fig$method)
dat.fig$prop.diff=factor(dat.fig$prop.diff)
dat.fig%>%datatable()%>%formatRound(columns=c("FDR", "FDRSD", "power", "powerSD"), digits=3)
p1=ggplot(dat.fig, aes(x=prop.diff, y=FDR, fill=method)) +
geom_hline(yintercept=0.05, linetype="solid", color="black", size = 0.2)+
geom_hline(yintercept=0.05+sqrt(0.05*0.95/100), linetype="dashed", color="black", size = 0.2)+
scale_y_continuous(breaks = c(0.05, seq(0.2, 1, 0.2)), limits = c(0, 0.8))+
coord_flip()+facet_grid(.~n.samp.grp)+
geom_bar(stat="identity", position=position_dodge())+
labs(x="Proportion of Differentially Abundant Taxa", y="", fill=NULL, title="FDR")+
scale_fill_brewer(palette="Dark2")+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title=element_text(hjust = 0.5),
strip.background = element_rect(fill="white"),
legend.position = "bottom")+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
ggarrange(p1, labels = "a")
p2=ggplot(dat.fig, aes(x=prop.diff, y=power, fill=method)) +
scale_y_continuous(breaks = seq(0.2, 1, 0.2), limits = c(0, 1))+
coord_flip()+facet_grid(.~n.samp.grp)+
geom_bar(stat="identity", position=position_dodge())+
labs(x="Proportion of Differentially Abundant Taxa", y="", fill=NULL, title="Power")+
scale_fill_brewer(palette="Dark2")+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill="white"),
plot.title=element_text(hjust = 0.5),
legend.position = "bottom")+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
ggarrange(p2, labels = "b")
rm(list = ls())
library(tidyverse)
library(phyloseq)
library(pander)
panderOptions('table.caption.prefix', NULL)
panderOptions('table.continues', NULL)
panderOptions('table.emphasize.rownames', FALSE)
gg_color_hue=function(n){
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
source("ancom_bc_v1.0.R")
source("sim_data_poi_gam_two_grp.R")
norm.df = read_csv("../data/sim_norm/norm_large.csv")
p.df = norm.df%>%gather(key = "method", value = "value", CD.ANCOM.BC:CD.TSS)
p.df$method = factor(p.df$method,
levels = c("CD.ANCOM.BC", "CD.UQ1", "CD.TMM1",
"CD.CSS", "CD.MED", "CD.UQ2", "CD.TMM2", "CD.TSS"))
norm.var = p.df%>%group_by(method)%>%
summarise(method.var = signif(var(value), 2))%>%
mutate(method.abb = c("ANCOM-BC", "ELib-UQ", "ELib-TMM", "CSS", "MED", "UQ", "TMM", "TSS"),
label = paste0(method.abb, " (", method.var, ")"))
p=ggplot(p.df, aes(x=method, y=value, color=method))+
scale_y_continuous(breaks = seq(-0.4, 0.4, 0.2), limits = c(-0.6, 0.9))+
geom_boxplot()+geom_hline(yintercept = 0, linetype="dotted")+
geom_jitter(color="gray28", position=position_jitter(0.2), aes(shape=group))+
scale_color_manual(name=NULL,
label=norm.var$label,
values = gg_color_hue(8))+
scale_shape_manual(name=NULL, values=c(1, 17))+
labs(x="", y="Residual")+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x=element_blank(),
axis.text.x = element_blank(),
legend.position = c(0.36, 0.85),
legend.direction = "horizontal", legend.box = "vertical")
p
ggsave("../figures/Figure 3.pdf", width=8.5, height=6, units='in')
norm.df = read_csv("../data/sim_norm/norm_moderate.csv")
p.df = norm.df%>%gather(key = "method", value = "value", CD.ANCOM.BC:CD.TSS)
p.df$method = factor(p.df$method,
levels = c("CD.ANCOM.BC", "CD.UQ1", "CD.TMM1",
"CD.CSS", "CD.MED", "CD.UQ2", "CD.TMM2", "CD.TSS"))
norm.var = p.df%>%group_by(method)%>%
summarise(method.var = signif(var(value), 2))%>%
mutate(method.abb = c("ANCOM-BC", "ELib-UQ", "ELib-TMM", "CSS", "MED", "UQ", "TMM", "TSS"),
label = paste0(method.abb, " (", method.var, ")"))
p=ggplot(p.df, aes(x=method, y=value, color=method))+
scale_y_continuous(breaks = seq(-0.4, 0.4, 0.2), limits = c(-0.6, 0.9))+
geom_boxplot()+geom_hline(yintercept = 0, linetype="dotted")+
geom_jitter(color="gray28", position=position_jitter(0.2), aes(shape=group))+
scale_color_manual(name=NULL,
label=norm.var$label,
values = gg_color_hue(8))+
scale_shape_manual(name=NULL, values=c(1, 17))+
labs(x="", y="Residual")+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x=element_blank(),
axis.text.x = element_blank(),
legend.position = c(0.36, 0.85),
legend.direction = "horizontal", legend.box = "vertical")
p
ggsave("../figures/Figure S1.pdf", width=8.5, height=6.25, units='in')
ggsave("../figures/Figure S1.pdf", width=8.5, height=6.5, units='in')
ggsave("../figures/Figure S1.pdf", width=8.5, height=7, units='in')
p=ggplot(p.df, aes(x=method, y=value, color=method))+
scale_y_continuous(breaks = seq(-0.4, 0.4, 0.2), limits = c(-0.6, 0.9))+
geom_boxplot()+geom_hline(yintercept = 0, linetype="dotted")+
geom_jitter(color="gray28", position=position_jitter(0.2), aes(shape=group))+
scale_color_manual(name=NULL,
label=norm.var$label,
values = gg_color_hue(8))+
scale_shape_manual(name=NULL, values=c(1, 17))+
labs(x="", y="Residual")+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x=element_blank(),
axis.text.x = element_blank(),
legend.position = c(0.85, 0.36),
legend.direction = "horizontal", legend.box = "vertical")
p
p=ggplot(p.df, aes(x=method, y=value, color=method))+
scale_y_continuous(breaks = seq(-0.4, 0.4, 0.2), limits = c(-0.6, 0.9))+
geom_boxplot()+geom_hline(yintercept = 0, linetype="dotted")+
geom_jitter(color="gray28", position=position_jitter(0.2), aes(shape=group))+
scale_color_manual(name=NULL,
label=norm.var$label,
values = gg_color_hue(8))+
scale_shape_manual(name=NULL, values=c(1, 17))+
labs(x="", y="Residual")+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x=element_blank(),
axis.text.x = element_blank(),
legend.position = c(0.36, 0.85),
legend.direction = "horizontal", legend.box = "vertical")+
guides(color = guide_legend(order=1),
shape = guide_legend(order=2))
p
ggsave("../figures/Figure S1.pdf", width=8.5, height=5, units='in')
rm(list = ls())
library(tidyverse)
library(phyloseq)
library(ggpubr)
library(RColorBrewer)
library(DT)
library(pander)
panderOptions('table.caption.prefix', NULL)
panderOptions('table.continues', NULL)
panderOptions('table.emphasize.rownames', FALSE)
source("sim_data_poi_gam_two_grp.R")
source("ancom_bc_v1.0.R")
# Read in original data
p.df = read_csv("../data/sim_additional/em_vs_wls.csv")
# Reshape data
p.df = data.frame(t(p.df))
colnames(p.df) = c("true", "em", "wls")
p.df = p.df%>%mutate(prop = rep(paste0(prop.diff*100, "%"), each = iterNum))
# The number of taxa, library size, and sample size
n.taxa = 1000; balanced.micro.load = FALSE; balanced.lib.size = TRUE
samp.frac = "small"; n.samp = "50_50"
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=seq(iterNum)
# Define the simulation parameters
simparams=expand.grid(n.taxa, n.samp, prop.diff, abn.seed,
balanced.micro.load, balanced.lib.size, samp.frac)
colnames(simparams)=c("n.taxa", "n.samp", "prop.diff", "abn.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac")
simparams=simparams%>%mutate(obs.seed=abn.seed+1)
simparams=simparams%>%separate(col = n.samp, into = c("n.samp.grp1", "n.samp.grp2"), sep = "_")
simparams=simparams%>%arrange(n.taxa, n.samp.grp1, prop.diff, abn.seed, obs.seed)
simparams.list=apply(simparams, 1, paste0, collapse="_")
simparamslabels=c("n.taxa", "n.samp.grp1", "n.samp.grp2","prop.diff", "abn.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac", "obs.seed")
p.df = p.df%>%mutate(prop = rep(paste0(prop.diff*100, "%"), each = iterNum))
# Annotation data
txt.df = p.df%>%group_by(prop)%>%
summarise(corr = cor.test(em, wls)$estimate,
p = cor.test(em, wls)$p.value)%>%
mutate(em = -0.35, wls = 0.4)
View(txt.df)
txt.df = txt.df%>%mutate(level = signif(p, 3),
label = paste0("r = ", round(corr, 2), " (", level, ")"))
View(txt.df)
txt.df = p.df%>%group_by(prop)%>%
summarise(corr = cor.test(em, wls)$estimate,
p = cor.test(em, wls)$p.value)%>%
mutate(em = -0.35, wls = 0.4)
txt.df = txt.df%>%mutate(level = signif(p, 3),
label = paste0("r = ", round(corr, 2), " (p = ", level, ")"))
View(txt.df)
txt.df$prop = factor(txt.df$prop, levels = c("5%", "15%", "25%"))
p.df$prop = factor(p.df$prop, levels = c("5%", "15%", "25%"))
p=ggplot(p.df, aes(em, wls)) + geom_point(size = 0.3) +
geom_abline(slope = 1, intercept = 0, color = "steelblue", linetype="dashed") +
scale_x_continuous(breaks = seq(-0.6, 0.6, 0.3), limits = c(-0.65, 0.65)) +
scale_y_continuous(breaks = seq(-0.6, 0.6, 0.3), limits = c(-0.65, 0.65)) +
facet_wrap(.~prop)+
labs(x="EM estimator", y="WLS estimator")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill="white"))+
guides(color = guide_legend(override.aes = list(size=3)))+
geom_text(data = txt.df, mapping = aes(x = em, y = wls, label = label))
p
p
txt.df = p.df%>%group_by(prop)%>%
summarise(corr = cor.test(em, wls)$estimate,
p = cor.test(em, wls)$p.value)%>%
mutate(em = -0.3, wls = 0.4)
txt.df = txt.df%>%mutate(level = signif(p, 3),
label = paste0("r = ", round(corr, 2), " (p = ", level, ")"))
txt.df$prop = factor(txt.df$prop, levels = c("5%", "15%", "25%"))
p.df$prop = factor(p.df$prop, levels = c("5%", "15%", "25%"))
p=ggplot(p.df, aes(em, wls)) + geom_point(size = 0.3) +
geom_abline(slope = 1, intercept = 0, color = "steelblue", linetype="dashed") +
scale_x_continuous(breaks = seq(-0.6, 0.6, 0.3), limits = c(-0.65, 0.65)) +
scale_y_continuous(breaks = seq(-0.6, 0.6, 0.3), limits = c(-0.65, 0.65)) +
facet_wrap(.~prop)+
labs(x="EM estimator", y="WLS estimator")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill="white"))+
guides(color = guide_legend(override.aes = list(size=3)))+
geom_text(data = txt.df, mapping = aes(x = em, y = wls, label = label))
p
ggsave("../figures/Figure S9.pdf", width=10, height=5, units='in')
rm(list = ls())
knitr::opts_chunk$set(fig.width = 8, fig.height = 5)
library(tidyverse)
library(nloptr)
library(phyloseq)
library(stringr)
library(RColorBrewer)
library(ggpubr)
library(ggforce)
library(limma)
library(vegan)
library(MASS)
library(pander)
panderOptions('table.caption.prefix', NULL)
panderOptions('table.continues', NULL)
panderOptions('table.emphasize.rownames', FALSE)
source("ancom_bc_v1.0.R")
source("ancom_v1.0.R")
# Meta data
meta_data=read_tsv("../data/global_gut/global_gut_metadata.txt")
meta_data=meta_data%>%transmute(Sample.ID=`#SampleID`, age=AGE, sex=SEX, country=COUNTRY)%>%
arrange(Sample.ID)
meta_data=meta_data[complete.cases(meta_data), ]
meta_data$age=as.numeric(meta_data$age)
meta_data$country=recode(meta_data$country, `GAZ:Malawi` = "MA",
`GAZ:United States of America` = "US", `GAZ:Venezuela` = "VEN")
# Taxonomy
taxonomy=read_tsv("../data/global_gut/global_gut_taxonomy.txt")
taxonomy=taxonomy%>%rowwise()%>%
mutate(genus_name=paste(Phylum, Genus, sep = ";"))
# OTU table
otu_table=read_tsv("../data/global_gut/global_gut_otu.txt")
otu_table=otu_table[, -532]
otu_table$OTU_ID=taxonomy$genus_name[match(otu_table$OTU_ID, taxonomy$OTU_ID)]
otu_table=as.data.frame(otu_table)
otu_table[, -1]=apply(otu_table[, -1], 2, as.numeric)
# Aggregate into genus level
genus_table=otu_table%>%group_by(OTU_ID)%>%
summarise_all(sum)
non_info_pos=grep("\\g__\\b", genus_table$OTU_ID) # Exact match
genus_table=genus_table[-non_info_pos, ]
genus_table=as.data.frame(genus_table)
# Subset meta data
meta.data=meta_data%>%filter(country%in%c("MA", "VEN"))
meta.data$country=as.character(meta.data$country)
# Subset OTU table
obs.abn=genus_table
rownames(obs.abn)=obs.abn$OTU_ID
obs.abn=obs.abn[, -1]
obs.abn=obs.abn[, meta.data$Sample.ID]
# Recode sample ID
meta.data$Sample.ID=seq(nrow(meta.data))
colnames(obs.abn)=seq(nrow(meta.data))
feature.table=obs.abn; sample.var="Sample.ID"; group.var="country";
zero.cut=0.90; lib.cut=1000; neg.lb=TRUE
pre.process=feature_table_pre_process(feature.table, meta.data, sample.var,
group.var, zero.cut, lib.cut, neg.lb)
feature.table=pre.process$feature.table
library.size=pre.process$library.size
group.name=pre.process$group.name
group.ind=pre.process$group.ind
struc.zero=pre.process$structure.zeros
# Paras for ANCOM-BC
grp.name=group.name; grp.ind=group.ind; adj.method="BH"
tol.EM=1e-5; max.iterNum=100; perNum=1000; alpha=0.05
# Run ANCOM-BC
out=ANCOM_BC(feature.table, grp.name, grp.ind, struc.zero, adj.method,
tol.EM, max.iterNum, perNum, alpha)
ancom.bc=out$d
y.ancom.bc=t(t(log(out$feature.table+1))-ancom.bc)
y.ancom.bc=y.ancom.bc+abs(min(y.ancom.bc, na.rm = T))
dist.ancom.bc=vegdist(t(y.ancom.bc), method="bray", na.rm = T)
fit.ancom.bc=isoMDS(dist.ancom.bc, k=2)
mds.xy.ancom.bc=data.frame(method = "ANCOM-BC", fit.ancom.bc$points)
mds.xy.ancom.bc$country=meta.data$country[match(colnames(out$feature.table), meta.data$Sample.ID)]
countdata=obs.abn
zero.threshold=0.90
taxa.info.ind=apply(countdata, 1, function(x) sum(x==0)/ncol(countdata))
countdata=countdata[which(taxa.info.ind<zero.threshold), ]+1L
groupdata=meta.data$country
dds=edgeR::DGEList(counts = countdata, group = groupdata)
dds=edgeR::calcNormFactors(dds, method="upperquartile")
UQ1=dds$samples$norm.factors*colSums(countdata, na.rm = T)
y.uq1=t(t(log(countdata))-log(UQ1))
y.uq1=y.uq1+abs(min(y.uq1))
dist.uq1=vegdist(t(y.uq1), method="bray", na.rm = T)
fit.uq1=isoMDS(dist.uq1, k=2)
mds.xy.uq1=data.frame(method = "ELib-UQ", fit.uq1$points, country = meta.data$country)
dds=edgeR::DGEList(counts = countdata, group = groupdata)
dds=edgeR::calcNormFactors(dds, method="TMM")
TMM1=dds$samples$norm.factors*colSums(countdata, na.rm = T)
y.tmm1=t(t(log(countdata))-log(TMM1))
y.tmm1=y.tmm1+abs(min(y.tmm1))
dist.tmm1=vegdist(t(y.tmm1), method="bray", na.rm = T)
fit.tmm1=isoMDS(dist.tmm1, k=2)
mds.xy.tmm1=data.frame(method = "ELib-TMM", fit.tmm1$points, country = meta.data$country)
rownames(meta.data)=meta.data$Sample.ID
phenotypeData = Biobase::AnnotatedDataFrame(meta.data)
obj = metagenomeSeq::newMRexperiment(countdata, phenoData=phenotypeData, featureData=NULL)
# Calculating normalization factors
obj = metagenomeSeq::cumNorm(obj)
CSS = metagenomeSeq::normFactors(obj)
y.css=t(t(log(countdata))-log(CSS))
y.css=y.css+abs(min(y.css))
dist.css=vegdist(t(y.css), method="bray", na.rm = T)
fit.css=isoMDS(dist.css, k=2)
mds.xy.css=data.frame(method = "CSS", fit.css$points, country = meta.data$country)
coldata=meta.data
count.table=DESeq2::DESeqDataSetFromMatrix(countData = countdata,
colData = coldata, design = ~ country)
dds=DESeq2::DESeq(count.table, quiet = TRUE)
MED=DESeq2::sizeFactors(dds)
y.med=t(t(log(countdata))-log(MED))
y.med=y.med+abs(min(y.med))
dist.med=vegdist(t(y.med), method="bray", na.rm = T)
fit.med=isoMDS(dist.med, k=2)
mds.xy.med=data.frame(method = "MED", fit.med$points, country = meta.data$country)
groupdata=meta.data$country
dds=edgeR::DGEList(counts = countdata, group = groupdata)
dds=edgeR::calcNormFactors(dds, method="upperquartile")
UQ2=dds$samples$norm.factors
y.uq2=t(t(log(countdata))-log(UQ2))
y.uq2=y.uq2+abs(min(y.uq2))
dist.uq2=vegdist(t(y.uq2), method="bray", na.rm = T)
fit.uq2=isoMDS(dist.uq2, k=2)
mds.xy.uq2=data.frame(method = "UQ", fit.uq2$points, country = meta.data$country)
dds=edgeR::DGEList(counts = countdata, group = groupdata)
dds=edgeR::calcNormFactors(dds, method="TMM")
TMM2=dds$samples$norm.factors
y.tmm2=t(t(log(countdata))-log(TMM2))
y.tmm2=y.tmm2+abs(min(y.tmm2))
dist.tmm2=vegdist(t(y.tmm2), method="bray", na.rm = T)
fit.tmm2=isoMDS(dist.tmm2, k=2)
mds.xy.tmm2=data.frame(method = "TMM", fit.tmm2$points, country = meta.data$country)
TSS=colSums(countdata, na.rm = T)
y.tss=t(t(log(countdata))-log(TSS))
y.tss=y.tss+abs(min(y.tss))
dist.tss=vegdist(t(y.tss), method="bray", na.rm = T)
fit.tss=isoMDS(dist.tss, k=2)
mds.xy.tss=data.frame(method = "TSS", fit.tss$points, country = meta.data$country)
ss_compute=function(x){
x=as.matrix(x)
ss=sum(t(t(x)-colMeans(x, na.rm = T))^2, na.rm = T)
return(ss)
}
mds.xy.ancom.bc=mds.xy.ancom.bc%>%mutate(scale_x1=scale(X1), scale_x2=scale(X2))
mds.xy.uq1=mds.xy.uq1%>%mutate(scale_x1=scale(X1), scale_x2=scale(X2))
mds.xy.tmm1=mds.xy.tmm1%>%mutate(scale_x1=scale(X1), scale_x2=scale(X2))
mds.xy.css=mds.xy.css%>%mutate(scale_x1=scale(X1), scale_x2=scale(X2))
mds.xy.med=mds.xy.med%>%mutate(scale_x1=scale(X1), scale_x2=scale(X2))
mds.xy.uq2=mds.xy.uq2%>%mutate(scale_x1=scale(X1), scale_x2=scale(X2))
mds.xy.tmm2=mds.xy.tmm2%>%mutate(scale_x1=scale(X1), scale_x2=scale(X2))
mds.xy.tss=mds.xy.tss%>%mutate(scale_x1=scale(X1), scale_x2=scale(X2))
mds.list=list(mds.xy.ancom.bc, mds.xy.uq1, mds.xy.tmm1, mds.xy.css,
mds.xy.med, mds.xy.uq2, mds.xy.tmm2, mds.xy.tss)
bss.df=data.frame(method=c("ANCOM-BC", "ELib-UQ", "ELib-TMM", "CSS", "MED", "UQ", "TMM", "TSS"), bss = NA)
for (i in 1:length(mds.list)) {
method=mds.list[[i]]
tss=ss_compute(method%>%dplyr::select(scale_x1, scale_x2))
wss=ss_compute(method%>%filter(country=="MA")%>%dplyr::select(scale_x1, scale_x2))+
ss_compute(method%>%filter(country=="VEN")%>%dplyr::select(scale_x1, scale_x2))
bss=tss-wss
bss.df[i, "bss"]=bss
}
txt.df = data.frame(X1=0.2, X2=0.25, bss.df)
txt.df$bss = paste0("BSS = ", round(txt.df$bss, 0))
p.df = rbind(mds.xy.ancom.bc, mds.xy.uq1, mds.xy.tmm1, mds.xy.css,
mds.xy.med, mds.xy.uq2, mds.xy.tmm2, mds.xy.tss)
write.csv(txt.df, "../data/global_gut/bss.csv", row.names = FALSE)
write.csv(p.df, "../data/global_gut/nmds.csv", row.names = FALSE)
txt.df = read_csv("../data/global_gut/bss.csv")
p.df = read_csv("../data/global_gut/nmds.csv")
txt.df$method = factor(txt.df$method, levels = c("ANCOM-BC", "ELib-UQ", "ELib-TMM", "CSS",
"MED", "UQ", "TMM", "TSS"))
p.df$method = factor(p.df$method, levels = c("ANCOM-BC", "ELib-UQ", "ELib-TMM", "CSS",
"MED", "UQ", "TMM", "TSS"))
p=ggplot(p.df, aes(X1, X2, color = country)) + geom_point(size = 0.3) +
facet_wrap(.~method, nrow = 2)+scale_y_continuous(limits = c(-0.3, 0.3))+
labs(x="First NMDS coordinate", y="Second NMDS coordinate")+
scale_color_discrete(name="", breaks=c("MA", "VEN"), labels = c("Malawi", "Venezuela"))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill="white"))+
guides(color = guide_legend(override.aes = list(size=3)))+
geom_text(data = txt.df, mapping = aes(x = X1, y = X2, label = bss, color = NULL,group= NULL))
p
