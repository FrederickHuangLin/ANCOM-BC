as.character(dat.fig$prop.diff)
dat.fig$prop.diff=as.character(dat.fig$prop.diff)
?recode
dat.fig$prop.diff=recode(dat.fig$prop.diff, `0.5` = "0.50")
dat.fig$prop.diff=factor(dat.fig$prop.diff)
dat.fig$prop.diff
dat.fig%>%datatable()%>%formatRound(columns=c("FDR", "FDRSD", "power", "powerSD"), digits=3)
p=ggplot(dat.fig, aes(x=prop.diff, y=FDR, fill=method)) +
geom_hline(yintercept=0.05, linetype="dashed", color="black", size = 0.2)+
scale_y_continuous(breaks = c(0.05, seq(0.2, 1, 0.2)), limits = c(0, 0.8))+
coord_flip()+facet_grid(.~n.samp.grp)+
geom_bar(stat="identity", position=position_dodge())+
labs(x="Proportion of Differentially Abundant Taxa", y="", fill=NULL, title="FDR")+
scale_fill_brewer(palette="Dark2")+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title=element_text(hjust = 0.5),
strip.background = element_rect(fill="white"),
legend.position = "bottom")+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
ggarrange(p, labels = "a")
p=ggplot(dat.fig, aes(x=prop.diff, y=power, fill=method)) +
scale_y_continuous(breaks = seq(0.2, 1, 0.2), limits = c(0, 1))+
coord_flip()+facet_grid(.~n.samp.grp)+
geom_bar(stat="identity", position=position_dodge())+
labs(x="Proportion of Differentially Abundant Taxa", y="", fill=NULL, title="Power")+
scale_fill_brewer(palette="Dark2")+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill="white"),
plot.title=element_text(hjust = 0.5),
legend.position = "bottom")+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
ggarrange(p, labels = "b")
rm(list = ls())
library(readxl)
library(tidyverse)
library(ggpubr)
library(DT)
library(pander)
panderOptions('table.caption.prefix', NULL)
panderOptions('table.continues', NULL)
panderOptions('table.emphasize.rownames', FALSE)
source("ancom_bc_v1.0.R")
source("sim_data_poi_gam_two_grp.R")
source("sim_data_poi_gam_multi_grp.R")
data_format1 = function(eval_data){
FDR=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
FDRSD=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
power=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
powerSD=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
FDR=signif(FDR, 2); FDRSD=signif(FDRSD, 2)
power=signif(power, 2); powerSD=signif(powerSD, 2)
data_sum = data.frame(simpattern, FDR, FDRSD, power, powerSD, row.names = NULL)
data_sum = data_sum%>%unite(n.samp.grp, n.samp.grp1, n.samp.grp2, sep = "/")%>%
mutate(prop.diff=prop.diff*100)
return(data_sum)
}
data_format2 = function(eval_data){
FDR=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
FDRSD=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
power=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
powerSD=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
FDR=signif(FDR, 2); FDRSD=signif(FDRSD, 2)
power=signif(power, 2); powerSD=signif(powerSD, 2)
data_sum = data.frame(simpattern, FDR, FDRSD, power, powerSD, row.names = NULL)
data_sum = data_sum%>%mutate(prop.diff=prop.diff*100,
n.samp.grp=gsub(" ", "/", n.samp.grp))
return(data_sum)
}
data_summary = function(eval_data, method){
FDR=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
FDRSD=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
power=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
powerSD=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
data_sum = data.frame(FDR, FDRSD, power, powerSD, simpattern, method)
data_sum = data_sum%>%unite(n.samp.grp, n.samp.grp1, n.samp.grp2, sep = ", ")
return(data_sum)
}
# The number of taxa, samping fraction variability, and sample size
n.taxa=1000; n.samp.grp=c("20 20 30 30", "50 50 50 50")
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=seq(iterNum)
# Define the simulation parameters combinations
simparams=expand.grid(n.taxa, n.samp.grp, prop.diff, abn.seed)
colnames(simparams)=c("n.taxa", "n.samp.grp", "prop.diff", "abn.seed")
simparams=simparams%>%mutate(obs.seed=abn.seed+1)
simparams=simparams%>%arrange(n.taxa, n.samp.grp, prop.diff, abn.seed, obs.seed)
simparams.list=apply(simparams, 1, paste0, collapse="_")
simparamslabels=c("n.taxa", "n.samp.grp", "prop.diff", "abn.seed", "obs.seed")
dat.multi=read_csv("../data/sim_additional/fdr_power_multi_group_ancom_bc.csv")
## Reshaping data
simpattern=distinct(simparams, n.taxa, n.samp.grp, prop.diff)
sum.multi=data_format2(dat.multi)
colnames(sum.multi)=c("# Taxa", "Sample Size", "Diff (%)", "FDR", "FDRSD", "Power", "PowerSD")
pander(sum.multi)
## Read in original data
dat.ancom_bc=read_csv("../data/sim_small_samp/fdr_power_small_samp_ancom_bc.csv")
dat.ancom=read_csv("../data/sim_small_samp/fdr_power_small_samp_ancom.csv")
dat.deseq2=read_csv("../data/sim_small_samp/fdr_power_small_samp_deseq2.csv")
dat.edger=read_csv("../data/sim_small_samp/fdr_power_small_samp_edger.csv")
dat.zilg=read_csv("../data/sim_small_samp/fdr_power_small_samp_zilg.csv")
dat.zig=read_csv("../data/sim_small_samp/fdr_power_small_samp_zig.csv")
dat.wilcox_un=read_csv("../data/sim_small_samp/fdr_power_small_samp_wilcox_un.csv")
dat.wilcox_tss=read_csv("../data/sim_small_samp/fdr_power_small_samp_wilcox_tss.csv")
rm(list = ls())
library(readxl)
library(tidyverse)
library(ggpubr)
library(DT)
library(pander)
panderOptions('table.caption.prefix', NULL)
panderOptions('table.continues', NULL)
panderOptions('table.emphasize.rownames', FALSE)
source("ancom_bc_v1.0.R")
source("sim_data_poi_gam_two_grp.R")
source("sim_data_poi_gam_multi_grp.R")
data_format1 = function(eval_data){
FDR=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
FDRSD=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
power=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
powerSD=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
FDR=signif(FDR, 2); FDRSD=signif(FDRSD, 2)
power=signif(power, 2); powerSD=signif(powerSD, 2)
data_sum = data.frame(simpattern, FDR, FDRSD, power, powerSD, row.names = NULL)
data_sum = data_sum%>%unite(n.samp.grp, n.samp.grp1, n.samp.grp2, sep = "/")%>%
mutate(prop.diff=prop.diff*100)
return(data_sum)
}
data_format2 = function(eval_data){
FDR=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
FDRSD=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
power=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
powerSD=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
FDR=signif(FDR, 2); FDRSD=signif(FDRSD, 2)
power=signif(power, 2); powerSD=signif(powerSD, 2)
data_sum = data.frame(simpattern, FDR, FDRSD, power, powerSD, row.names = NULL)
data_sum = data_sum%>%mutate(prop.diff=prop.diff*100,
n.samp.grp=gsub(" ", "/", n.samp.grp))
return(data_sum)
}
data_summary = function(eval_data, method){
FDR=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
FDRSD=tapply(as.numeric(eval_data[1, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
power=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) mean(x, na.rm = T))
powerSD=tapply(as.numeric(eval_data[2, ]),
rep(seq(nrow(simpattern)), each=iterNum), function(x) sd(x, na.rm = T))
data_sum = data.frame(FDR, FDRSD, power, powerSD, simpattern, method)
data_sum = data_sum%>%unite(n.samp.grp, n.samp.grp1, n.samp.grp2, sep = ", ")
return(data_sum)
}
# The number of taxa, samping fraction variability, and sample size
n.taxa=1000; samp.frac.var="large"; n.samp=c("5_5", "10_10")
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=seq(iterNum)
# Define the simulation parameters combinations
simparams=expand.grid(n.taxa, n.samp, prop.diff, abn.seed, samp.frac.var)
colnames(simparams)=c("n.taxa", "n.samp", "prop.diff", "abn.seed", "samp.frac.var")
simparams=simparams%>%mutate(obs.seed=abn.seed+1)
simparams=simparams%>%separate(col = n.samp, into = c("n.samp.grp1", "n.samp.grp2"), sep = "_")
simparams$n.samp.grp1=as.numeric(simparams$n.samp.grp1)
simparams$n.samp.grp2=as.numeric(simparams$n.samp.grp2)
simparams=simparams%>%arrange(n.taxa, n.samp.grp1, prop.diff, abn.seed, obs.seed)
simparams.list=apply(simparams, 1, paste0, collapse="_")
simparamslabels=c("n.taxa", "n.samp.grp1", "n.samp.grp2","prop.diff",
"abn.seed", "samp.frac.var", "obs.seed")
## Read in original data
dat.ancom_bc=read_csv("../data/sim_small_samp/fdr_power_small_samp_ancom_bc.csv")
dat.ancom=read_csv("../data/sim_small_samp/fdr_power_small_samp_ancom.csv")
dat.deseq2=read_csv("../data/sim_small_samp/fdr_power_small_samp_deseq2.csv")
dat.edger=read_csv("../data/sim_small_samp/fdr_power_small_samp_edger.csv")
dat.zilg=read_csv("../data/sim_small_samp/fdr_power_small_samp_zilg.csv")
dat.zig=read_csv("../data/sim_small_samp/fdr_power_small_samp_zig.csv")
dat.wilcox_un=read_csv("../data/sim_small_samp/fdr_power_small_samp_wilcox_un.csv")
dat.wilcox_tss=read_csv("../data/sim_small_samp/fdr_power_small_samp_wilcox_tss.csv")
## Reshaping data
simpattern=distinct(simparams, n.taxa, n.samp.grp1, n.samp.grp2, prop.diff)
eval.dat.list = list(dat.ancom_bc, dat.ancom, dat.deseq2, dat.edger,
dat.zilg, dat.zig, dat.wilcox_un, dat.wilcox_tss)
method.list = list("ANCOM-BC", "ANCOM", "DESeq2", "edgeR", "ZILG", "ZIG", "Wilcoxon", "Wilcoxon + TSS")
dat.fig.list = vector(mode = "list", length = length(eval.dat.list))
for (i in 1:length(eval.dat.list)) {
dat.fig.list[[i]] = data_summary(eval.dat.list[[i]], method.list[[i]])
}
## Merge data
dat.fig=Reduce('rbind', dat.fig.list)
dat.fig$n.samp.grp=factor(dat.fig$n.samp.grp)
dat.fig$n.samp.grp
levels(dat.fig$n.samp.grp)
?levels
?factor
dat.fig$n.samp.grp=factor(dat.fig$n.samp.grp, levels = c("10/10", "5/5"))
dat.fig$n.samp.grp
## Merge data
dat.fig=Reduce('rbind', dat.fig.list)
## Merge data
dat.fig=Reduce('rbind', dat.fig.list)
dat.fig$n.samp.grp=factor(dat.fig$n.samp.grp)
dat.fig$n.samp.grp
levels(dat.fig$n.samp.grp)=c("n = 10/10", "n = 5/5")
dat.fig$n.samp.grp
relevel(dat.fig$n.samp.grp, ref = "n = 5/5")
levels(dat.fig$n.samp.grp)
dat.fig$n.samp.grp
## Merge data
dat.fig=Reduce('rbind', dat.fig.list)
dat.fig$n.samp.grp=factor(dat.fig$n.samp.grp)
dat.fig$n.samp.grp=recode(dat.fig$n.samp.grp,
`5, 5`="n = 5/5", `10, 10`="n = 10/10")
dat.fig$n.samp.grp
## Merge data
dat.fig=Reduce('rbind', dat.fig.list)
dat.fig$n.samp.grp=recode(dat.fig$n.samp.grp,
`5, 5`="n = 5/5", `10, 10`="n = 10/10")
dat.fig$n.samp.grp
dat.fig$n.samp.grp=factor(dat.fig$n.samp.grp, levels = c("n = 5/5", "n = 10/10"))
dat.fig$n.samp.grp
dat.fig$method=factor(dat.fig$method)
dat.fig$prop.diff=factor(dat.fig$prop.diff)
dat.fig%>%datatable()%>%formatRound(columns=c("FDR", "FDRSD", "power", "powerSD"), digits=3)
p=ggplot(dat.fig, aes(x=prop.diff, y=FDR, fill=method)) +
geom_hline(yintercept=0.05, linetype="dashed", color="black", size = 0.2)+
scale_y_continuous(breaks = c(0.05, seq(0.2, 1, 0.2)), limits = c(0, 0.8))+
coord_flip()+facet_grid(.~n.samp.grp)+
geom_bar(stat="identity", position=position_dodge())+
labs(x="Proportion of Differentially Abundant Taxa", y="", fill=NULL, title="FDR")+
scale_fill_brewer(palette="Dark2")+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title=element_text(hjust = 0.5),
strip.background = element_rect(fill="white"),
legend.position = "bottom")+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
ggarrange(p, labels = "a")
p=ggplot(dat.fig, aes(x=prop.diff, y=power, fill=method)) +
scale_y_continuous(breaks = seq(0.2, 1, 0.2), limits = c(0, 1))+
coord_flip()+facet_grid(.~n.samp.grp)+
geom_bar(stat="identity", position=position_dodge())+
labs(x="Proportion of Differentially Abundant Taxa", y="", fill=NULL, title="Power")+
scale_fill_brewer(palette="Dark2")+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill="white"),
plot.title=element_text(hjust = 0.5),
legend.position = "bottom")+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
ggarrange(p, labels = "b")
## Read in original data
dat.ancom_bc=read_csv("../data/sim_small_samp/fdr_power_small_samp_ancom_bc.csv")
dat.ancom=read_csv("../data/sim_small_samp/fdr_power_small_samp_ancom.csv")
dat.deseq2=read_csv("../data/sim_small_samp/fdr_power_small_samp_deseq2.csv")
dat.edger=read_csv("../data/sim_small_samp/fdr_power_small_samp_edger.csv")
dat.zilg=read_csv("../data/sim_small_samp/fdr_power_small_samp_zilg.csv")
dat.zig=read_csv("../data/sim_small_samp/fdr_power_small_samp_zig.csv")
dat.wilcox_un=read_csv("../data/sim_small_samp/fdr_power_small_samp_wilcox_un.csv")
dat.wilcox_tss=read_csv("../data/sim_small_samp/fdr_power_small_samp_wilcox_tss.csv")
## Reshaping data
simpattern=distinct(simparams, n.taxa, n.samp.grp1, n.samp.grp2, prop.diff)
View(simpattern)
eval.dat.list = list(dat.ancom_bc, dat.ancom, dat.deseq2, dat.edger,
dat.zilg, dat.zig, dat.wilcox_un, dat.wilcox_tss)
method.list = list("ANCOM-BC", "ANCOM", "DESeq2", "edgeR", "ZILG", "ZIG", "Wilcoxon", "Wilcoxon + TSS")
dat.fig.list = vector(mode = "list", length = length(eval.dat.list))
for (i in 1:length(eval.dat.list)) {
dat.fig.list[[i]] = data_summary(eval.dat.list[[i]], method.list[[i]])
}
## Merge data
dat.fig=Reduce('rbind', dat.fig.list)
View(dat.fig)
View(dat.fig)
View(simparams)
View(dat.ancom_bc)
library(tidyverse)
source("sim_data_poi_gam_two_grp.R")
source("ancom_bc_v1.0.R")
# The number of taxa, library size, and sample size
n.taxa=1000; samp.frac.var="large"; n.samp=c("5_5", "10_10")
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=seq(iterNum)
# Define the simulation parameters
simparams=expand.grid(n.taxa, n.samp, prop.diff, abn.seed, samp.frac.var)
colnames(simparams)=c("n.taxa", "n.samp", "prop.diff", "abn.seed", "samp.frac.var")
simparams=simparams%>%mutate(obs.seed=abn.seed+1)
simparams=simparams%>%separate(col = n.samp, into = c("n.samp.grp1", "n.samp.grp2"), sep = "_")
simparams=simparams%>%arrange(n.taxa, n.samp.grp1, prop.diff, abn.seed, obs.seed)
simparams.list=apply(simparams, 1, paste0, collapse="_")
simparamslabels=c("n.taxa", "n.samp.grp1", "n.samp.grp2","prop.diff",
"abn.seed", "samp.frac.var", "obs.seed")
View(simparams)
# The number of taxa, samping fraction variability, and sample size
n.taxa=1000; samp.frac.var="large"; n.samp=c("5_5", "10_10")
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=seq(iterNum)
# Define the simulation parameters combinations
simparams=expand.grid(n.taxa, n.samp, prop.diff, abn.seed, samp.frac.var)
colnames(simparams)=c("n.taxa", "n.samp", "prop.diff", "abn.seed", "samp.frac.var")
simparams=simparams%>%mutate(obs.seed=abn.seed+1)
simparams=simparams%>%separate(col = n.samp, into = c("n.samp.grp1", "n.samp.grp2"), sep = "_")
simparams$n.samp.grp1=as.numeric(simparams$n.samp.grp1)
simparams$n.samp.grp2=as.numeric(simparams$n.samp.grp2)
simparams=simparams%>%arrange(n.taxa, n.samp.grp1, prop.diff, abn.seed, obs.seed)
simparams.list=apply(simparams, 1, paste0, collapse="_")
simparamslabels=c("n.taxa", "n.samp.grp1", "n.samp.grp2","prop.diff",
"abn.seed", "samp.frac.var", "obs.seed")
View(simparams)
# The number of taxa, library size, and sample size
n.taxa=1000; samp.frac.var="large"; n.samp=c("5_5", "10_10")
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=seq(iterNum)
# Define the simulation parameters
simparams=expand.grid(n.taxa, n.samp, prop.diff, abn.seed, samp.frac.var)
colnames(simparams)=c("n.taxa", "n.samp", "prop.diff", "abn.seed", "samp.frac.var")
simparams=simparams%>%mutate(obs.seed=abn.seed+1)
simparams=simparams%>%separate(col = n.samp, into = c("n.samp.grp1", "n.samp.grp2"), sep = "_")
simparams=simparams%>%arrange(n.taxa, n.samp.grp1, prop.diff, abn.seed, obs.seed)
simparams.list=apply(simparams, 1, paste0, collapse="_")
simparamslabels=c("n.taxa", "n.samp.grp1", "n.samp.grp2","prop.diff",
"abn.seed", "samp.frac.var", "obs.seed")
View(simparams)
# The number of taxa, library size, and sample size
n.taxa=1000; samp.frac.var="large"; n.samp=c("5_5", "10_10")
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=seq(iterNum)
# Define the simulation parameters
simparams=expand.grid(n.taxa, n.samp, prop.diff, abn.seed, samp.frac.var)
colnames(simparams)=c("n.taxa", "n.samp", "prop.diff", "abn.seed", "samp.frac.var")
simparams=simparams%>%mutate(obs.seed=abn.seed+1)
simparams=simparams%>%separate(col = n.samp, into = c("n.samp.grp1", "n.samp.grp2"), sep = "_")
simparams$n.samp.grp1
# The number of taxa, samping fraction variability, and sample size
n.taxa=1000; samp.frac.var="large"; n.samp=c("5_5", "10_10")
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=seq(iterNum)
# Define the simulation parameters combinations
simparams=expand.grid(n.taxa, n.samp, prop.diff, abn.seed, samp.frac.var)
colnames(simparams)=c("n.taxa", "n.samp", "prop.diff", "abn.seed", "samp.frac.var")
simparams=simparams%>%mutate(obs.seed=abn.seed+1)
simparams=simparams%>%separate(col = n.samp, into = c("n.samp.grp1", "n.samp.grp2"), sep = "_")
simparams=simparams%>%arrange(n.taxa, n.samp.grp1, prop.diff, abn.seed, obs.seed)
simparams.list=apply(simparams, 1, paste0, collapse="_")
simparamslabels=c("n.taxa", "n.samp.grp1", "n.samp.grp2","prop.diff",
"abn.seed", "samp.frac.var", "obs.seed")
View(simparams)
## Read in original data
dat.ancom_bc=read_csv("../data/sim_small_samp/fdr_power_small_samp_ancom_bc.csv")
dat.ancom=read_csv("../data/sim_small_samp/fdr_power_small_samp_ancom.csv")
dat.deseq2=read_csv("../data/sim_small_samp/fdr_power_small_samp_deseq2.csv")
dat.edger=read_csv("../data/sim_small_samp/fdr_power_small_samp_edger.csv")
dat.zilg=read_csv("../data/sim_small_samp/fdr_power_small_samp_zilg.csv")
dat.zig=read_csv("../data/sim_small_samp/fdr_power_small_samp_zig.csv")
dat.wilcox_un=read_csv("../data/sim_small_samp/fdr_power_small_samp_wilcox_un.csv")
dat.wilcox_tss=read_csv("../data/sim_small_samp/fdr_power_small_samp_wilcox_tss.csv")
## Reshaping data
simpattern=distinct(simparams, n.taxa, n.samp.grp1, n.samp.grp2, prop.diff)
eval.dat.list = list(dat.ancom_bc, dat.ancom, dat.deseq2, dat.edger,
dat.zilg, dat.zig, dat.wilcox_un, dat.wilcox_tss)
method.list = list("ANCOM-BC", "ANCOM", "DESeq2", "edgeR", "ZILG", "ZIG", "Wilcoxon", "Wilcoxon + TSS")
dat.fig.list = vector(mode = "list", length = length(eval.dat.list))
for (i in 1:length(eval.dat.list)) {
dat.fig.list[[i]] = data_summary(eval.dat.list[[i]], method.list[[i]])
}
## Merge data
dat.fig=Reduce('rbind', dat.fig.list)
dat.fig$n.samp.grp=recode(dat.fig$n.samp.grp,
`5, 5`="n = 5/5", `10, 10`="n = 10/10")
dat.fig$n.samp.grp=factor(dat.fig$n.samp.grp, levels = c("n = 5/5", "n = 10/10"))
dat.fig$method=factor(dat.fig$method)
dat.fig$prop.diff=factor(dat.fig$prop.diff)
dat.fig%>%datatable()%>%formatRound(columns=c("FDR", "FDRSD", "power", "powerSD"), digits=3)
View(simpattern)
dat.fig=dat.fig%>%arrange(n.samp.grp)
dat.fig%>%datatable()%>%formatRound(columns=c("FDR", "FDRSD", "power", "powerSD"), digits=3)
dat.fig=Reduce('rbind', dat.fig.list)
dat.fig$n.samp.grp=recode(dat.fig$n.samp.grp,
`5, 5`="n = 5/5", `10, 10`="n = 10/10")
dat.fig$n.samp.grp=factor(dat.fig$n.samp.grp, levels = c("n = 5/5", "n = 10/10"))
dat.fig$method=factor(dat.fig$method)
dat.fig$prop.diff=factor(dat.fig$prop.diff)
dat.fig=dat.fig%>%arrange(method, n.samp.grp)
dat.fig%>%datatable()%>%formatRound(columns=c("FDR", "FDRSD", "power", "powerSD"), digits=3)
p=ggplot(dat.fig, aes(x=prop.diff, y=FDR, fill=method)) +
geom_hline(yintercept=0.05, linetype="dashed", color="black", size = 0.2)+
scale_y_continuous(breaks = c(0.05, seq(0.2, 1, 0.2)), limits = c(0, 0.8))+
coord_flip()+facet_grid(.~n.samp.grp)+
geom_bar(stat="identity", position=position_dodge())+
labs(x="Proportion of Differentially Abundant Taxa", y="", fill=NULL, title="FDR")+
scale_fill_brewer(palette="Dark2")+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title=element_text(hjust = 0.5),
strip.background = element_rect(fill="white"),
legend.position = "bottom")+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
ggarrange(p, labels = "a")
p=ggplot(dat.fig, aes(x=prop.diff, y=power, fill=method)) +
scale_y_continuous(breaks = seq(0.2, 1, 0.2), limits = c(0, 1))+
coord_flip()+facet_grid(.~n.samp.grp)+
geom_bar(stat="identity", position=position_dodge())+
labs(x="Proportion of Differentially Abundant Taxa", y="", fill=NULL, title="Power")+
scale_fill_brewer(palette="Dark2")+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill="white"),
plot.title=element_text(hjust = 0.5),
legend.position = "bottom")+
guides(fill=guide_legend(nrow=2, byrow=TRUE))
ggarrange(p, labels = "b")
library(microbiome)
source("ancom_bc_v1.0.R")
data(dietswap)
pseq = dietswap
n_taxa = ntaxa(pseq)
n_samp = nsamples(pseq)
# Metadata
meta_data = meta(pseq)
# Taxonomy table
taxonomy = tax_table(pseq)
# Absolute abundances
otu_absolute = abundances(pseq)
View(meta_data)
feature.table = otu_absolute; sample.var = "sample"; group.var = "nationality";
zero.cut = 0.90; lib.cut = 1000; neg.lb = TRUE
pre.process = feature_table_pre_process(feature.table, meta_data, sample.var,
group.var, zero.cut, lib.cut, neg.lb)
feature.table = pre.process$feature.table
group.name = pre.process$group.name
group.ind = pre.process$group.ind
struc.zero = pre.process$structure.zeros
# Paras for ANCOM-BC
grp.name = group.name; grp.ind = group.ind; adj.method = "bonferroni"
tol.EM = 1e-5; max.iterNum = 100; perNum = 1000; alpha = 0.05
out = ANCOM_BC(feature.table, grp.name, grp.ind, struc.zero,
adj.method, tol.EM, max.iterNum, perNum, alpha)
res = out$res
View(res)
res = cbind(taxon = rownames(out$feature.table), out$res)
View(res)
sum(res$diff.abn)
write_csv(res, "demo_two_group.csv")
library(readr)
write_csv(res, "demo_two_group.csv")
# Pre-processing
feature.table = otu_absolute; sample.var = "sample"; group.var = "bmi_group";
zero.cut = 0.90; lib.cut = 1000; neg.lb = TRUE
pre.process = feature_table_pre_process(feature.table, meta_data, sample.var,
group.var, zero.cut, lib.cut, neg.lb)
feature.table = pre.process$feature.table
group.name = pre.process$group.name
group.ind = pre.process$group.ind
struc.zero = pre.process$structure.zeros
# Paras for ANCOM-BC
grp.name = group.name; grp.ind = group.ind; adj.method = "bonferroni"
tol.EM = 1e-5; max.iterNum = 100; perNum = 1000; alpha = 0.05
out = ANCOM_BC(feature.table, grp.name, grp.ind, struc.zero,
adj.method, tol.EM, max.iterNum, perNum, alpha)
res = cbind(taxon = rownames(out$feature.table), out$res)
write_csv(res, "demo_multi_group.csv")
View(res)
sum(res$diff.abn)
source("ancom_bc_v1.0.R")
View(feature_table_pre_process)
View(ANCOM_BC)
