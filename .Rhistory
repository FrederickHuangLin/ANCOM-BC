}
c(bias.true, bias.em, bias.wls)
# The number of taxa, library size, and sample size
n.taxa = 1000; balanced.micro.load = FALSE; balanced.lib.size = TRUE
samp.frac = "small"; n.samp = "50_50"
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=seq(iterNum)
# Define the simulation parameters
simparams=expand.grid(n.taxa, n.samp, prop.diff, abn.seed,
balanced.micro.load, balanced.lib.size, samp.frac)
colnames(simparams)=c("n.taxa", "n.samp", "prop.diff", "abn.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac")
simparams=simparams%>%mutate(obs.seed=abn.seed+1)
simparams=simparams%>%separate(col = n.samp, into = c("n.samp.grp1", "n.samp.grp2"), sep = "_")
simparams=simparams%>%arrange(n.taxa, n.samp.grp1, prop.diff, abn.seed, obs.seed)
simparams.list=apply(simparams, 1, paste0, collapse="_")
simparamslabels=c("n.taxa", "n.samp.grp1", "n.samp.grp2","prop.diff", "abn.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac", "obs.seed")
i = simparams.list[[1]]
print(i)
params = strsplit(i, "_")[[1]]
names(params) <- simparamslabels
# Paras for data generation
n.taxa=as.numeric(params["n.taxa"])
n.samp.grp1=as.numeric(params["n.samp.grp1"])
n.samp.grp2=as.numeric(params["n.samp.grp2"])
prop.diff=as.numeric(params["prop.diff"])
abn.seed=as.numeric(params["abn.seed"])
obs.seed=as.numeric(params["obs.seed"])
balanced.micro.load=as.logical(params["balanced.micro.load"])
balanced.lib.size=as.logical(params["balanced.lib.size"])
samp.frac=params["samp.frac"]
# Data generation
low.abn=50; med.abn=200; high.abn=10000; struc.zero.prop=0.20; out.zero.prop=0.05
test.dat=abn.tab.gen1(n.taxa, n.samp.grp1, n.samp.grp2, low.abn, med.abn, high.abn,
prop.diff, abn.seed, obs.seed, struc.zero.prop, out.zero.prop,
balanced.micro.load, balanced.lib.size, samp.frac)
obs.abn=test.dat$obs.abn
meta.data=cbind(Sample.ID=paste0("sub", seq(n.samp.grp1+n.samp.grp2)),
group=rep(c(1, 2), c(n.samp.grp1, n.samp.grp2)))
d=log(test.dat$samp.frac)
# Pre-processing
feature.table=obs.abn; sample.var="Sample.ID"; group.var="group"
zero.cut=0.90; lib.cut=1000; neg.lb=FALSE
pre.process=feature_table_pre_process(feature.table, meta.data, sample.var,
group.var, zero.cut, lib.cut, neg.lb)
feature.table=pre.process$feature.table
group.name=pre.process$group.name
group.ind=pre.process$group.ind
struc.zero=pre.process$structure.zeros
# Paras for ANCOM-BC
grp.name=group.name; grp.ind=group.ind; adj.method="bonferroni"
tol.EM=1e-5; max.iterNum=100; perNum=1000; alpha=0.05
# Run ANCOM-BC
suppressWarnings(out <- try(ANCOM_BC(feature.table, grp.name, grp.ind, struc.zero,
adj.method, tol.EM, max.iterNum, perNum, alpha),
silent = TRUE))
if (inherits(out, "try-error")) {
bias.true=NA; bias.em=NA; bias.wls=NA; bias.diff=NA
}else{
bias.true=mean(d[1:n.samp.grp1]) - mean(d[(n.samp.grp1+1):(n.samp.grp1+n.samp.grp2)])
bias.em=out$bias.em[2]; bias.wls=out$bias.wls[2]
}
c(bias.true, bias.em, bias.wls)
i = simparams.list[[2]]
print(i)
params = strsplit(i, "_")[[1]]
names(params) <- simparamslabels
# Paras for data generation
n.taxa=as.numeric(params["n.taxa"])
n.samp.grp1=as.numeric(params["n.samp.grp1"])
n.samp.grp2=as.numeric(params["n.samp.grp2"])
prop.diff=as.numeric(params["prop.diff"])
abn.seed=as.numeric(params["abn.seed"])
obs.seed=as.numeric(params["obs.seed"])
balanced.micro.load=as.logical(params["balanced.micro.load"])
balanced.lib.size=as.logical(params["balanced.lib.size"])
samp.frac=params["samp.frac"]
# Data generation
low.abn=50; med.abn=200; high.abn=10000; struc.zero.prop=0.20; out.zero.prop=0.05
test.dat=abn.tab.gen1(n.taxa, n.samp.grp1, n.samp.grp2, low.abn, med.abn, high.abn,
prop.diff, abn.seed, obs.seed, struc.zero.prop, out.zero.prop,
balanced.micro.load, balanced.lib.size, samp.frac)
obs.abn=test.dat$obs.abn
meta.data=cbind(Sample.ID=paste0("sub", seq(n.samp.grp1+n.samp.grp2)),
group=rep(c(1, 2), c(n.samp.grp1, n.samp.grp2)))
d=log(test.dat$samp.frac)
# Pre-processing
feature.table=obs.abn; sample.var="Sample.ID"; group.var="group"
zero.cut=0.90; lib.cut=1000; neg.lb=FALSE
pre.process=feature_table_pre_process(feature.table, meta.data, sample.var,
group.var, zero.cut, lib.cut, neg.lb)
feature.table=pre.process$feature.table
group.name=pre.process$group.name
group.ind=pre.process$group.ind
struc.zero=pre.process$structure.zeros
# Paras for ANCOM-BC
grp.name=group.name; grp.ind=group.ind; adj.method="bonferroni"
tol.EM=1e-5; max.iterNum=100; perNum=1000; alpha=0.05
# Run ANCOM-BC
suppressWarnings(out <- try(ANCOM_BC(feature.table, grp.name, grp.ind, struc.zero,
adj.method, tol.EM, max.iterNum, perNum, alpha),
silent = TRUE))
if (inherits(out, "try-error")) {
bias.true=NA; bias.em=NA; bias.wls=NA; bias.diff=NA
}else{
bias.true=mean(d[1:n.samp.grp1]) - mean(d[(n.samp.grp1+1):(n.samp.grp1+n.samp.grp2)])
bias.em=out$bias.em[2]; bias.wls=out$bias.wls[2]
}
c(bias.true, bias.em, bias.wls)
rm(list = ls())
library(tidyverse)
library(phyloseq)
library(ggpubr)
library(RColorBrewer)
library(DT)
library(pander)
panderOptions('table.caption.prefix', NULL)
panderOptions('table.continues', NULL)
panderOptions('table.emphasize.rownames', FALSE)
source("sim_data_poi_gam_two_grp.R")
source("ancom_bc_v1.0.R")
# The number of taxa, library size, and sample size
n.taxa = 1000; balanced.micro.load = FALSE; balanced.lib.size = TRUE
samp.frac = "small"; n.samp = "50_50"
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=seq(iterNum)
# Define the simulation parameters
simparams=expand.grid(n.taxa, n.samp, prop.diff, abn.seed,
balanced.micro.load, balanced.lib.size, samp.frac)
colnames(simparams)=c("n.taxa", "n.samp", "prop.diff", "abn.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac")
simparams=simparams%>%mutate(obs.seed=abn.seed+1)
simparams=simparams%>%separate(col = n.samp, into = c("n.samp.grp1", "n.samp.grp2"), sep = "_")
simparams=simparams%>%arrange(n.taxa, n.samp.grp1, prop.diff, abn.seed, obs.seed)
simparams.list=apply(simparams, 1, paste0, collapse="_")
simparamslabels=c("n.taxa", "n.samp.grp1", "n.samp.grp2","prop.diff", "abn.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac", "obs.seed")
# Read in original data
p.df = read_csv("../data/sim_additional/em_vs_wls.csv")
# Reshape data
p.df = data.frame(t(p.df))
View(p.df)
colnames(p.df) = c("true", "em", "wls")
p.df = p.df%>%mutate(prop = rep(prop.diff, each = iterNum))
View(p.df)
p.df = read_csv("../data/sim_additional/em_vs_wls.csv")
# Reshape data
p.df = data.frame(t(p.df))
colnames(p.df) = c("true", "em", "wls")
p.df = p.df%>%mutate(prop = rep(paste0(prop.diff*100, "%"), each = iterNum))
View(p.df)
# Annotation data
txt.df = data.frame(em = -0.5, wls = 0.4, paste0(prop.diff*100, "%"), corr = NA, p = NA)
txt.df$corr = p.df%>%group_by(prop, samp.size)%>%
summarise(corr = cor.test(em, wls)$estimate)%>%.$corr
txt.df$corr = p.df%>%group_by(prop)%>%
summarise(corr = cor.test(em, wls)$estimate)%>%.$corr
txt.df$p = p.df%>%group_by(prop)%>%
summarise(p = cor.test(em, wls)$p.value)%>%.$p
txt.df = txt.df%>%mutate(level = ifelse(p < .001, "p < .001", round(p, 3)),
label = paste0("r = ", round(corr, 2), " (", level, ")"))
View(txt.df)
txt.df$prop = factor(txt.df$prop)
p.df$prop = factor(p.df$prop)
txt.df$prop
txt.df = data.frame(em = -0.5, wls = 0.4, prop = paste0(prop.diff*100, "%"), corr = NA, p = NA)
txt.df$corr = p.df%>%group_by(prop)%>%
summarise(corr = cor.test(em, wls)$estimate)%>%.$corr
txt.df$p = p.df%>%group_by(prop)%>%
summarise(p = cor.test(em, wls)$p.value)%>%.$p
txt.df = txt.df%>%mutate(level = ifelse(p < .001, "p < .001", round(p, 3)),
label = paste0("r = ", round(corr, 2), " (", level, ")"))
txt.df$prop = factor(txt.df$prop)
p.df$prop = factor(p.df$prop)
txt.df$prop
txt.df$prop = factor(txt.df$prop, levels = c("5%", "15%", "25%"))
txt.df$prop
p.df$prop = factor(p.df$prop, levels = c("5%", "15%", "25%"))
p=ggplot(p.df, aes(em, wls)) + geom_point(size = 0.3) +
geom_abline(slope = 1, intercept = 0, color = "steelblue", linetype="dashed") +
scale_x_continuous(breaks = seq(-0.8, 0.4, 0.4), limits = c(-0.85, 0.45)) +
scale_y_continuous(breaks = seq(-0.8, 0.4, 0.4), limits = c(-0.85, 0.45)) +
facet_wrap(.~prop)+
labs(x="EM estimator", y="WLS estimator")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill="white"))+
guides(color = guide_legend(override.aes = list(size=3)))+
geom_text(data = txt.df, mapping = aes(x = em, y = wls, label = label))
p
p=ggplot(p.df, aes(em, wls)) + geom_point(size = 0.3) +
geom_abline(slope = 1, intercept = 0, color = "steelblue", linetype="dashed") +
facet_wrap(.~prop)+
labs(x="EM estimator", y="WLS estimator")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill="white"))+
guides(color = guide_legend(override.aes = list(size=3)))+
geom_text(data = txt.df, mapping = aes(x = em, y = wls, label = label))
p
seq(-0.6, 0.6, 0.2)
seq(-0.6, 0.6, 0.3)
p=ggplot(p.df, aes(em, wls)) + geom_point(size = 0.3) +
geom_abline(slope = 1, intercept = 0, color = "steelblue", linetype="dashed") +
scale_x_continuous(breaks = seq(-0.6, 0.6, 0.3), limits = c(-0.65, 0.65)) +
scale_y_continuous(breaks = seq(-0.6, 0.6, 0.3), limits = c(-0.65, 0.65)) +
facet_wrap(.~prop)+
labs(x="EM estimator", y="WLS estimator")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill="white"))+
guides(color = guide_legend(override.aes = list(size=3)))+
geom_text(data = txt.df, mapping = aes(x = em, y = wls, label = label))
p
txt.df = data.frame(em = -0.35, wls = 0.4, prop = paste0(prop.diff*100, "%"), corr = NA, p = NA)
txt.df$corr = p.df%>%group_by(prop)%>%
summarise(corr = cor.test(em, wls)$estimate)%>%.$corr
txt.df$p = p.df%>%group_by(prop)%>%
summarise(p = cor.test(em, wls)$p.value)%>%.$p
txt.df = txt.df%>%mutate(level = ifelse(p < .001, "p < .001", round(p, 3)),
label = paste0("r = ", round(corr, 2), " (", level, ")"))
txt.df$prop = factor(txt.df$prop, levels = c("5%", "15%", "25%"))
p.df$prop = factor(p.df$prop, levels = c("5%", "15%", "25%"))
p=ggplot(p.df, aes(em, wls)) + geom_point(size = 0.3) +
geom_abline(slope = 1, intercept = 0, color = "steelblue", linetype="dashed") +
scale_x_continuous(breaks = seq(-0.6, 0.6, 0.3), limits = c(-0.65, 0.65)) +
scale_y_continuous(breaks = seq(-0.6, 0.6, 0.3), limits = c(-0.65, 0.65)) +
facet_wrap(.~prop)+
labs(x="EM estimator", y="WLS estimator")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill="white"))+
guides(color = guide_legend(override.aes = list(size=3)))+
geom_text(data = txt.df, mapping = aes(x = em, y = wls, label = label))
p
ggsave("../figures/Figure S9.pdf", width=6.25, height=5, units='in')
ggsave("../figures/Figure S9.jpeg", width=6.25, height=5, units='in', dpi = 300)
ggsave("../figures/Figure S9.pdf", width=10, height=5, units='in')
ggsave("../figures/Figure S9.jpeg", width=10, height=5, units='in', dpi = 300)
# The number of taxa, library size, and sample size
n.taxa = 1000; balanced.micro.load = FALSE; balanced.lib.size = TRUE
samp.frac = "small"; n.samp = "50_50"
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=1
obs.seed=1:100
# Define the simulation parameters
simparams=expand.grid(n.taxa, n.samp, prop.diff, abn.seed, obs.seed,
balanced.micro.load, balanced.lib.size, samp.frac)
colnames(simparams)=c("n.taxa", "n.samp", "prop.diff", "abn.seed", "obs.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac")
simparams=simparams%>%separate(col = n.samp, into = c("n.samp.grp1", "n.samp.grp2"), sep = "_")
simparams=simparams%>%arrange(n.taxa, n.samp.grp1, prop.diff, abn.seed, obs.seed)
simparams.list=apply(simparams, 1, paste0, collapse="_")
simparamslabels=c("n.taxa", "n.samp.grp1", "n.samp.grp2","prop.diff", "abn.seed", "obs.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac")
# Read in original data
tab.df = read_csv("../data/sim_additional/bias_var_em_wls.csv")
# Reshape data
tab.df = data.frame(t(tab.df))
colnames(tab.df) = c("true", "em", "wls")
tab.df = tab.df%>%mutate(prop = rep(paste0(prop.diff*100, "%"), each = iterNum))
View(tab.df)
# Summary
tab = tab.df%>%group_by(prop)%>%
summarise(bias.em = (mean(em) - true[1])^2,
bias.wls = (mean(wls) - true[1])^2,
var.em = var(em),
var.wls = var(wls),
`1/(nm0)` = 1/(50*1000*(1-prop.diff)))%>%
arrange(prop, samp.size)
# Summary
tab = tab.df%>%group_by(prop)%>%
summarise(bias.em = (mean(em) - true[1])^2,
bias.wls = (mean(wls) - true[1])^2,
var.em = var(em),
var.wls = var(wls))%>%
arrange(prop, samp.size)
# Summary
tab = tab.df%>%group_by(prop)%>%
summarise(bias.em = (mean(em) - true[1])^2,
bias.wls = (mean(wls) - true[1])^2,
var.em = var(em),
var.wls = var(wls))%>%
arrange(prop)
View(tab)
tab.df = read_csv("../data/sim_additional/bias_var_em_wls.csv")
# Reshape data
tab.df = data.frame(t(tab.df))
colnames(tab.df) = c("true", "em", "wls")
tab.df = tab.df%>%mutate(prop = rep(prop.diff, each = iterNum))
# Summary
tab = tab.df%>%group_by(prop)%>%
summarise(bias.em = (mean(em) - true[1])^2,
bias.wls = (mean(wls) - true[1])^2,
var.em = var(em),
var.wls = var(wls),
`1/(nm0)` = 1/(50*1000*(1-prop)))%>%
arrange(prop)
# Summary
tab = tab.df%>%group_by(prop)%>%
summarise(bias.em = (mean(em) - true[1])^2,
bias.wls = (mean(wls) - true[1])^2,
var.em = var(em),
var.wls = var(wls),
`1/(nm0)` = 1/(50*1000*(1-prop[1])))%>%
arrange(prop)
View(tab)
1/(50*1000*0.95)
1/(50*1000*0.85)
?recode
tab$prop = recode(tab$prop, `0.05` = "5%", `0.15` = "15%", `0.25` = "25%")
pander(tab)
# Summary
tab = tab.df%>%group_by(prop)%>%
summarise(bias.em = signif((mean(em) - true[1])^2, 3),
bias.wls = signif((mean(wls) - true[1])^2, 3),
var.em = signif(var(em), 3),
var.wls = signif(var(wls), 3),
`1/(nm0)` = signif(1/(50*1000*(1-prop[1])), 3))%>%
arrange(prop)
tab$prop = recode(tab$prop, `0.05` = "5%", `0.15` = "15%", `0.25` = "25%")
pander(tab)
rm(list = ls())
library(tidyverse)
library(phyloseq)
library(ggpubr)
library(RColorBrewer)
library(DT)
library(pander)
panderOptions('table.caption.prefix', NULL)
panderOptions('table.continues', NULL)
panderOptions('table.emphasize.rownames', FALSE)
source("sim_data_poi_gam_two_grp.R")
source("ancom_bc_v1.0.R")
# Read in original data
tab.df = read_csv("../data/sim_additional/bias_var_em_wls.csv")
# Reshape data
tab.df = data.frame(t(tab.df))
colnames(tab.df) = c("true", "em", "wls")
tab.df = tab.df%>%mutate(diff = rep(prop.diff, each = iterNum))
# The number of taxa, library size, and sample size
n.taxa = 1000; balanced.micro.load = FALSE; balanced.lib.size = TRUE
samp.frac = "small"; n.samp = "50_50"
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=1
obs.seed=1:100
# Define the simulation parameters
simparams=expand.grid(n.taxa, n.samp, prop.diff, abn.seed, obs.seed,
balanced.micro.load, balanced.lib.size, samp.frac)
colnames(simparams)=c("n.taxa", "n.samp", "prop.diff", "abn.seed", "obs.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac")
simparams=simparams%>%separate(col = n.samp, into = c("n.samp.grp1", "n.samp.grp2"), sep = "_")
simparams=simparams%>%arrange(n.taxa, n.samp.grp1, prop.diff, abn.seed, obs.seed)
simparams.list=apply(simparams, 1, paste0, collapse="_")
simparamslabels=c("n.taxa", "n.samp.grp1", "n.samp.grp2","prop.diff", "abn.seed", "obs.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac")
# Read in original data
tab.df = read_csv("../data/sim_additional/bias_var_em_wls.csv")
# Reshape data
tab.df = data.frame(t(tab.df))
colnames(tab.df) = c("true", "em", "wls")
tab.df = tab.df%>%mutate(diff = rep(prop.diff, each = iterNum))
# Summary
tab = tab.df%>%group_by(diff)%>%
summarise(bias2.em = signif((mean(em) - true[1])^2, 3),
bias2.wls = signif((mean(wls) - true[1])^2, 3),
var.em = signif(var(em), 3),
var.wls = signif(var(wls), 3),
`1/(nm0)` = signif(1/(50*1000*(1-diff[1])), 3))%>%
arrange(prop)
# Summary
tab = tab.df%>%group_by(diff)%>%
summarise(bias2.em = signif((mean(em) - true[1])^2, 3),
bias2.wls = signif((mean(wls) - true[1])^2, 3),
var.em = signif(var(em), 3),
var.wls = signif(var(wls), 3),
`1/(nm0)` = signif(1/(50*1000*(1-diff[1])), 3))%>%
arrange(diff)
tab$diff = recode(tab$diff, `0.05` = "5%", `0.15` = "15%", `0.25` = "25%")
pander(tab)
rm(list = ls())
library(tidyverse)
library(phyloseq)
library(ggpubr)
library(RColorBrewer)
library(DT)
library(pander)
panderOptions('table.caption.prefix', NULL)
panderOptions('table.continues', NULL)
panderOptions('table.emphasize.rownames', FALSE)
source("sim_data_poi_gam_two_grp.R")
source("ancom_bc_v1.0.R")
# The number of taxa, library size, and sample size
n.taxa = 1000; balanced.micro.load = FALSE; balanced.lib.size = TRUE
samp.frac = "small"; n.samp = "50_50"
# The proportion of differentially abundant taxa
prop.diff=c(0.05, 0.15, 0.25)
# Set seeds
iterNum=100
abn.seed=seq(iterNum)
# Define the simulation parameters
simparams=expand.grid(n.taxa, n.samp, prop.diff, abn.seed,
balanced.micro.load, balanced.lib.size, samp.frac)
colnames(simparams)=c("n.taxa", "n.samp", "prop.diff", "abn.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac")
simparams=simparams%>%mutate(obs.seed=abn.seed+1)
simparams=simparams%>%separate(col = n.samp, into = c("n.samp.grp1", "n.samp.grp2"), sep = "_")
simparams=simparams%>%arrange(n.taxa, n.samp.grp1, prop.diff, abn.seed, obs.seed)
simparams.list=apply(simparams, 1, paste0, collapse="_")
simparamslabels=c("n.taxa", "n.samp.grp1", "n.samp.grp2","prop.diff", "abn.seed",
"balanced.micro.load", "balanced.lib.size", "samp.frac", "obs.seed")
# Read in original data
p.df = read_csv("../data/sim_additional/em_vs_wls.csv")
# Reshape data
p.df = data.frame(t(p.df))
colnames(p.df) = c("true", "em", "wls")
p.df = p.df%>%mutate(prop = rep(paste0(prop.diff*100, "%"), each = iterNum))
# Annotation data
txt.df = data.frame(em = -0.35, wls = 0.4, prop = paste0(prop.diff*100, "%"), corr = NA, p = NA)
txt.df$corr = p.df%>%group_by(prop)%>%
summarise(corr = cor.test(em, wls)$estimate)%>%.$corr
txt.df$p = p.df%>%group_by(prop)%>%
summarise(p = cor.test(em, wls)$p.value)%>%.$p
View(txt.df)
txt.df = txt.df%>%mutate(level = ifelse(p < .001, "p < .001", round(p, 3)),
label = paste0("r = ", round(corr, 2), " (", level, ")"))
txt.df$prop = factor(txt.df$prop, levels = c("5%", "15%", "25%"))
p.df$prop = factor(p.df$prop, levels = c("5%", "15%", "25%"))
p=ggplot(p.df, aes(em, wls)) + geom_point(size = 0.3) +
geom_abline(slope = 1, intercept = 0, color = "steelblue", linetype="dashed") +
scale_x_continuous(breaks = seq(-0.6, 0.6, 0.3), limits = c(-0.65, 0.65)) +
scale_y_continuous(breaks = seq(-0.6, 0.6, 0.3), limits = c(-0.65, 0.65)) +
facet_wrap(.~prop)+
labs(x="EM estimator", y="WLS estimator")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill="white"))+
guides(color = guide_legend(override.aes = list(size=3)))+
geom_text(data = txt.df, mapping = aes(x = em, y = wls, label = label))
p
View(p.df)
temp = p.df%>%filter(prop = "25%")
temp = p.df%>%filter(prop == "25%")
View(temp)
cor.test(temp$em, temp$wls)
# Annotation data
txt.df = data.frame(em = -0.35, wls = 0.4, corr = NA, p = NA)
View(txt.df)
txt.df$corr = p.df%>%group_by(prop)%>%
summarise(corr = cor.test(em, wls)$estimate)%>%.$corr
# Annotation data
txt.df = p.df%>%group_by(prop)%>%
summarise(corr = cor.test(em, wls)$estimate,
p = cor.test(em, wls)$p.value))
# Annotation data
txt.df = p.df%>%group_by(prop)%>%
summarise(corr = cor.test(em, wls)$estimate,
p = cor.test(em, wls)$p.value)
View(txt.df)
# Annotation data
txt.df = p.df%>%group_by(prop)%>%
summarise(corr = cor.test(em, wls)$estimate,
p = cor.test(em, wls)$p.value)%>%
mutate(em = -0.35, wls = 0.4)
View(txt.df)
txt.df = txt.df%>%mutate(level = ifelse(p < .001, "p < .001", round(p, 3)),
label = paste0("r = ", round(corr, 2), " (", level, ")"))
txt.df$prop = factor(txt.df$prop, levels = c("5%", "15%", "25%"))
p.df$prop = factor(p.df$prop, levels = c("5%", "15%", "25%"))
p=ggplot(p.df, aes(em, wls)) + geom_point(size = 0.3) +
geom_abline(slope = 1, intercept = 0, color = "steelblue", linetype="dashed") +
scale_x_continuous(breaks = seq(-0.6, 0.6, 0.3), limits = c(-0.65, 0.65)) +
scale_y_continuous(breaks = seq(-0.6, 0.6, 0.3), limits = c(-0.65, 0.65)) +
facet_wrap(.~prop)+
labs(x="EM estimator", y="WLS estimator")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill="white"))+
guides(color = guide_legend(override.aes = list(size=3)))+
geom_text(data = txt.df, mapping = aes(x = em, y = wls, label = label))
p
